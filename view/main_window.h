#ifndef STATMOD_MAIN_WINDOW_H
#define STATMOD_MAIN_WINDOW_H


#include "p_val_graph_widget.h"

#include "../internal/vector.h"

#include <QMainWindow>


class Window : public QMainWindow {
    Vector<ModelRunner *> models_;
    QWidget *graph_ = nullptr;
public:
    explicit Window(Vector<ModelRunner *> models, int width = 800, int height = 600) : models_(std::move(models)) {
        auto bar = new QToolBar("Models", this);

        auto help_action = new QAction("Help", this);
        connect(help_action, &QAction::triggered, [=]() {
            QMessageBox msgBox;
            msgBox.setText("This is a little help message. Hope, it's helpful a little.\n\n"
                           ""
                           "Both Chen/Table modeling methods allow to map U[0, 1] to a distribution with a known "
                           "vector of probabilities/integer weights accordingly. "
                           "This vector is generated by the program based on a length provided by the user "
                           "(and, additionally, a max value in case of Table method).\n\n"
                           ""
                           "Alternative hypothesises are generated by deviating an original one (a model). To calculate "
                           "Type I error keep the 'Alt. Deviation' equal to 0, for calculating Type II error set the "
                           "size of deviation of an alternative hypothesises."
                           "\n\n"
                           ""
                           "ABBREVIATIONS & VARIABLES:\n"
                           "  K -- weights for Simple Table modeling method\n"
                           "  Prob. -- a vector of probabilities for Chen modeling method\n"
                           "  m -- length of supporting array for Chen modeling\n"
                           "  Exp. Num. -- number of experiments to generate a p-value\n"
                           "  p-val. Num. -- number of p-values to generate\n"
                           "  Seed -- seed for a Mersenne Twister RNG\n"
                           "  K/Prob. Gen. Seed -- seed for generating K/Prob."
            );
            msgBox.exec();
        });
        bar->addAction(help_action);

        QAction *base = nullptr;
        for (auto model: models_) {
            auto action = new QAction(model->default_config().title, this);
            connect(action, &QAction::triggered, [=]() {
                set_model(model);
            });
            bar->addAction(action);

            if (base == nullptr) {
                base = action;
            }
        }

        addToolBar(bar);
        base->trigger();

        setMinimumSize(width, height);
        resize(width, height);

        show();
    };

    void set_model(ModelRunner *model) {
        delete graph_;
        setCentralWidget(graph_ = model->new_graph_widget(this));
    }

    ~Window() override { delete graph_; }
};


#endif //STATMOD_MAIN_WINDOW_H
